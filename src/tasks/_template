use std::collections::HashMap;

use async_trait::async_trait;
use serde_yaml::Value;
use std::time::Instant;

use crate::executor::{ExecuteResult, WebDriverSession};

use super::{get_task_name, Task, TaskErr, TaskOk, TaskResult, TaskTypes};


const TASK_TYPE: &str = "<TASK>";

#[derive(PartialEq, Eq, Debug)]
pub struct <TASK_HERE> {
    _task_types: TaskTypes,
    name: String,
}

#[async_trait]
impl Task for <TASK_HERE> {
    fn new(task: &HashMap<String, Value>) -> TaskResult<<TASK_HERE>> {
        let name = get_task_name(&task)?;


        Ok(<TASK_HERE> {
            _task_types: TaskTypes::<TASK_TYPE_HERE>,
            name
        })
    }

    async fn execute(&self, web_driver_session: WebDriverSession) -> ExecuteResult {
        let start = Instant::now();


        let name = self.name.clone();
        return Ok((
            web_driver_session,
            TaskOk {
                name,
                task_type: TaskTypes::<TASK_TYPE_HERE>,
                duration: start.elapsed().as_secs(),
                result: None
            },
        ));
    }
}